(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{421:function(t,s,n){"use strict";n.r(s);var a=n(21),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"第6章-补充"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第6章-补充"}},[t._v("#")]),t._v(" 第6章 补充")]),t._v(" "),n("h1",{attrs:{id:"签名细节"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#签名细节"}},[t._v("#")]),t._v(" 签名细节")]),t._v(" "),n("h2",{attrs:{id:"签名计算"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#签名计算"}},[t._v("#")]),t._v(" 签名计算：")]),t._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://blog.csdn.net/bebest2010/article/details/81070071",target:"_blank",rel:"noopener noreferrer"}},[t._v("比特币交易签名过程详解_bebest2010的博客-CSDN博客"),n("OutboundLink")],1)])]),t._v(" "),n("p",[t._v("签名计算中， 把其他输入的sigscript调整为空，把自己输入的sigscript设置为pkscript,并末尾加上四字节小端序的sighash_type，并进行两次sha256：")]),t._v(" "),n("p",[n("img",{attrs:{src:"images/sighash.png",alt:""}})]),t._v(" "),n("p",[t._v("在对这个hash进行签名计算，得出签名数据（签名时不用再计算hash，直接调用ecdsa-sign-digest）")]),t._v(" "),n("h2",{attrs:{id:"脚本中的签名"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#脚本中的签名"}},[t._v("#")]),t._v(" "),n("strong",[t._v("脚本中的签名")])]),t._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/35684664",target:"_blank",rel:"noopener noreferrer"}},[t._v("# bitcoin 源码解析 - 交易 Transaction(四) - Script2"),n("OutboundLink")],1)])]),t._v(" "),n("p",[t._v("签名是怎么得到")]),t._v(" "),n("p",[n("img",{attrs:{src:"images/sighash2.png",alt:""}})]),t._v(" "),n("p",[t._v("如图所示，我们以图正中间的空白箭头把参与角色分为发起交易者和矿工。")]),t._v(" "),n("p",[t._v("这个部分也是中本聪在一开始就设计好的体系，也就是说中本聪通过hashtype字段制定了签名的对象。")]),t._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("enum\n{\n    SIGHASH_ALL = 1,\n    SIGHASH_NONE = 2,\n    SIGHASH_SINGLE = 3,\n    SIGHASH_ANYONECANPAY = 0x80,\n};\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br")])]),n("p",[t._v("hashtype的取值是这4个，我们由下图来解释这些取值的含义：")]),t._v(" "),n("p",[n("img",{attrs:{src:"images/sighash3.png",alt:""}})]),t._v(" "),n("p",[t._v("这里我认为中本聪设计的意图是为了通过in标明这个in控制的out的权限。我首先解释一下总体流程：")]),t._v(" "),n("p",[t._v("首先我们知道sig是为了填充到TxIn中的脚本的字段，而填充的这个签名所签署的东西，是"),n("strong",[t._v("正在创建的Tx")]),t._v("的hash。所以很显然，我要填充的东西就是我正在创建的东西这是不可能的，所以"),n("strong",[t._v("作为签署的临时Tx中")]),t._v("的txIn里面的脚本是由这个TxIn对应的上一个交易的Out中的内容来填充。生成这个临时Tx的时候是把其他的TxIn中的脚本都置空(但是保留TxIn的其他基本信息，只是把脚本置空)。这里请注意，每一个临时Tx是针对一个TxIn生成的，也就是同一个交易中的不同的TxIn完全可以用不同的hashtype来生成性质不一致的签名。而SIGHASH_XXX中的ALL，NONE，SIGNLE实际上代表的被签署的临时Tx中的TxOut的管理，一旦包含相应的TxOut进入签名的内容，就相当于签署当前TxIn的私钥的控制者对不同的TxOut的认可情况。")]),t._v(" "),n("ul",[n("li",[t._v("SIGHASH_ALL是默认选项，具体流程是把所有的TxOut都纳入临时Tx中用来生成被签署的交易，相当于针对这个TxIn，"),n("strong",[t._v("这个交易中的所有的TxOut都已经被这个TxIn承认，不可改")])]),t._v(" "),n("li",[t._v("SIGHASH_NONE，具体流程是把所有的TxOut都置空，相当于针对这个TxIn，不关心这个交易的TxOut是什么情况，即使被替换了也是可以的")]),t._v(" "),n("li",[t._v("SIGHASH_SINGLE，具体流程是只保留和自已同样index的out，其他的out都置空，表示只关心和自己同样index的out，其他的out不关心。比如当前的txin是这个交易的第3个in(index=2)，那么这个交易的第3个out保留，其他的out都置空。")])]),t._v(" "),n("p",[t._v("而SIGHASH_ANYONECANPAY比较特殊，他是独立的。可以和另3个标志取并集。它表示签署这个TxIn的时候我连其他的TxIn都不关心，可以和前面3个并存。")]),t._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// Blank out other inputs completely, not recommended for open transactions\n    if (nHashType & SIGHASH_ANYONECANPAY)\n    {\n        txTmp.vin[0] = txTmp.vin[nIn]; // 只保留自己的TxIn\n        txTmp.vin.resize(1);\n    }\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])]),n("p",[t._v("而在生成这个临时Tx后，就如前面那张图的流程所示，先序列化，然后在序列化后加上hashtype(用来做校验)之后再进行hash。然后能操作对应TxOut的私钥持有者使用私钥对这个hash进行签名，签名过后附加上hashtype(告诉别人自己使用的是哪种类型)，成为放入TxIn中的sig部分数据。")]),t._v(" "),n("p",[t._v("另一方面对于矿工流程也就是和签名之前生成hash的流程是一致的，因为矿工可以取出签名字段末尾的hashtype明白交易的创造者使用的那种hashtype，然后进行同样的步骤生成临时交易并获得hash，然后就可以用从上一个交易中拿出来的公钥，临时交易的hash，和签名进行验证是否通过了。如验证通过，就代表这个交易中的TxIn确实是由这个私钥持有者发出了，而交易中的TxOut也确实是按照私钥持有者的意图(不同的hashtype指定的意图)生成的。")]),t._v(" "),n("p",[t._v("由于这样的体系，我们可以发现比特币的一个交易其实关键是交易中的TxIn，一笔交易完全可以"),n("strong",[t._v("由不同的人")]),t._v("生成各自的TxIn然后再组合出这个交易，这样就让 "),n("strong",[t._v("多方参与")]),t._v(" 成为了可能。而不是一个交易只有输入和输出两个参与者。")]),t._v(" "),n("p",[t._v("同样，以上所有的设计都是在最初始版本的bitcoin中就已经完全具备的功能，再一次感慨中本聪设计比特币的细腻和高瞻远瞩。")]),t._v(" "),n("p",[t._v("构造交易的过程是:")]),t._v(" "),n("p",[t._v("1.生成临时的tx")]),t._v(" "),n("p",[t._v("2.然后在序列化后加上hashtype(用来做校验)之后再进行hash，这个hashtype应该交易的最后四个字节")]),t._v(" "),n("p",[t._v("3.签名")]),t._v(" "),n("p",[t._v("4.签名过后附加上hashtype(告诉别人自己使用的是哪种类型)；这个时候hashtype是作为DER-encoded signature plus嵌入到Txin里面的，Txin的最终格式是:")]),t._v(" "),n("p",[t._v("签名数据+1个字节的hashtype长度表示+DER encode hashtype+公钥")]),t._v(" "),n("p",[t._v("5.因为Txin里面有hashtype了，可以把第2步里面用到的最后四个字节删掉")]),t._v(" "),n("p",[t._v("6.这就是完整的一笔交易")]),t._v(" "),n("h2",{attrs:{id:"参考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),n("p",[n("a",{attrs:{href:"http://www.righto.com/2014/02/bitcoins-hard-way-using-raw-bitcoin.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bitcoins the hard way: Using the raw Bitcoin protocol"),n("OutboundLink")],1)]),t._v(" "),n("p",[n("a",{attrs:{href:"http://www.righto.com/2014/02/bitcoin-mining-hard-way-algorithms.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bitcoin mining the hard way: the algorithms, protocols, and bytes"),n("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);